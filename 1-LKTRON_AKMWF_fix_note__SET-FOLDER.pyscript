"""Notes corresponding frequencies."""

# from enveditor import Editor, EditorSample, Utils, MEEditor, ScriptDialog, Sample
from enveditor import Editor, EditorSample, Utils, MEEditor, ScriptDialog, Sample
from akscripts.notes_dict_factory import notes_dict_factory
from akscripts.edison.get_note_name_from_regions import get_note_name_from_regions
from akscripts.edison.set_sample_to_mono_sum_stereo import set_sample_to_mono_sum_stereo
from akscripts.edison.remove_all_regions import remove_all_regions
from akscripts.edison.find_peaks import find_peaks


def find_previouse_zero_crossing(sample_start_point, search_area):
    """Find the previous zero crossing."""
    for i in range(sample_start_point, search_area, -1):
        if EditorSample.GetSampleAt(i, 0) < 0:
            return i
    return None


def apply_crossfade():
    """Apply crossfade to the entire sample."""
    total_length = EditorSample.Length
    fade_length = int(total_length / 2)

    for i in range(fade_length):

        fade_in_factor = i / fade_length
        fade_out_factor = 1 - fade_in_factor

        for i in range(fade_length):

            fade_in_factor = i / fade_length
            fade_out_factor = 1 - fade_in_factor  # Decreases from 1 to 0

            for channel in range(EditorSample.NumChans):

                sample_value_first = EditorSample.GetSampleAt(i, channel)
                sample_value_second = EditorSample.GetSampleAt(i + fade_length, channel)

                mixed_value = (sample_value_first * fade_out_factor) + (
                    sample_value_second * fade_in_factor
                )

                EditorSample.SetSampleAt(i, channel, mixed_value)

    EditorSample.AddRegion("Loop", 0)

    region_count = EditorSample.RegionCount

    for i in range(region_count - 1, -1, -1):

        EditorSample.GetRegion(i).SampleStart = 0
        EditorSample.GetRegion(i).SampleEnd = int(fade_length)

    EditorSample.DeleteFromTo(int(fade_length) + 3, EditorSample.Length - 1)

    return True


def crop_sample(start, end, padding=0):
    """Crop sample."""

    start += 1
    end -= 1

    start_applied_padding = int(start - padding)
    end_applied_padding = int(end + padding)

    EditorSample.DeleteFromTo(
        end_applied_padding,
        EditorSample.Length - 1,
    )

    EditorSample.DeleteFromTo(0, start_applied_padding)


def set_loop_region(start, end):
    """Set loop region."""
    region_name = "Loop"
    EditorSample.AddRegion(region_name, start, end)
    region_count = EditorSample.RegionCount
    loop_region = None
    for i in range(region_count - 1, -1, -1):
        if EditorSample.GetRegion(i).Name == region_name:
            loop_region = EditorSample.GetRegion(i)
            break
    return loop_region


def main():
    """Main function."""

    set_sample_to_mono_sum_stereo()

    notes_dict = notes_dict_factory()
    note_name = get_note_name_from_regions()
    current_note = notes_dict[note_name]
    loop_length = current_note["prefered_samples_per_cycle_x4"]
    remove_all_regions()

    peak_search_start = int((EditorSample.Length / 2) - (loop_length / 2))

    peak_search_end = int((EditorSample.Length / 2) + (loop_length / 2))

    largest_peak, smallest_peak, largest_peak_position, smallest_peak_position = (
        find_peaks(peak_search_start, peak_search_end)
    )

    naive_loop_start = int(largest_peak_position)

    naive_loop_end = int(largest_peak_position + loop_length)

    if note_name == "error":
        Utils.ShowMessage("No region found.")
        return

    loop_region = set_loop_region(naive_loop_start, naive_loop_end)

    zero_crossing_start = find_previouse_zero_crossing(
        loop_region.SampleStart, int(loop_length)
    )

    if zero_crossing_start is not None:
        loop_region.SampleStart = int(zero_crossing_start)
        loop_region.SampleEnd = int(zero_crossing_start + loop_length)
    else:
        Utils.ShowMessage("No zero crossing found.")
        return

    zero_crossing_end = find_previouse_zero_crossing(loop_region.SampleEnd + 10, 10)

    if zero_crossing_end is not None:
        loop_region.SampleEnd = int(zero_crossing_end)
    else:
        Utils.ShowMessage("No zero crossing found.")

    crop_sample(
        loop_region.SampleStart,
        loop_region.SampleEnd,
        loop_length * 2,
    )

    return


if __name__ == "__main__":
    main()
